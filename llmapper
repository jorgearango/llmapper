#!/bin/bash

# Draw a concept map from a Wikipedia page

# Directory for temporary files; this lets you monitor prompt output
TMPDIR="./tmp"

# Directory to save generated maps. By default, the file will be named
# output.png. Change that each time so you don't overwrite your maps.
MAPDIR="./maps"

# Get the title of the page to be mapped; eliminate the "- Wikipedia" string.
TITLE=$(curl -s $1 | grep -i '<title>' | sed -e 's/<[^>]*>//g' | sed -e 's/ - Wikipedia//g' | awk '{$1=$1;print}')

# Give user feedback - it's working.
echo "Drawing a map for \"$TITLE\"..."

# Caption to be appended to the bottom of the map.
CAPTION="\"$TITLE\" by LLMapper â€¢ This is an AI-generated concept map. It likely has errors and is published solely for educational purposes."

# Set variable for prompt that summarizes article
PROMPTSUM=$(<./prompt-summarize.md)

# Prompt that turns summary into a set of subject-predicate-object sentences.
# read -r -d '' PROMPTSTR << EOM
PROMPTSTR=$(<./prompt-rdf.md)

# Prompt that turns subject-predicate-object sentences into DOT language.
# read -r -d '' PROMPTDIA << EOM
PROMPTDIA=$(<./prompt-dot.md)

# Fetch content from URL, focus on one particular region, truncate to 8,000 tokens, pass to LLM for summarization
echo "Parsing URL"

# ELEMENT=$curl -s $1 | ttok -t 4000 | llm -s "you are a professional HTML developer. Examine the source code for this web page and determine the CLASS or ID attribute of the HTML element that contains most of the content on the page. Ignore global navigation elements or other site-level templates; focus only on the content for this page. Respond ONLY with the name of the CLASS, ID, or HTML tag that contains the main page content. Do not include tick marks, quotes, or any other characters - only the element name" -m 4t
# curl -s $1 | strip-tags .mw-content-ltr | ttok -t 8000 | llm -s "$PROMPTSUM" > $TMPDIR/summary-out.md
curl -s $1 | strip-tags .mw-content-ltr | llm -s "$PROMPTSUM" -m 4t > $TMPDIR/summary-out.md

# Pass summarized text to prompt that generates RDF of the summary
echo "Writing RDF code"
cat $TMPDIR/summary-out.md | sed -e "s/'/\\\\'/g" -e 's/"/\\\\"/g' | xargs -J % echo $PROMPTSTR % | llm -s -m4 -o temperature 0.2 > $TMPDIR/rdf-out.md

# Pass subject-object-predicate sentences to prompt that generate DOT code
echo "Writing DOT code"
# cat $TMPDIR/prompt-1-out.md | sed -e "s/'/\\\\'/g" -e 's/"/\\\\"/g' | xargs -J % echo $PROMPTDIA % | llm -s -m4 | sed '/```.*/d' > $TMPDIR/graph.dot
cat $TMPDIR/rdf-out.md | sed -e "s/'/\\\\'/g" -e 's/"/\\\\"/g' | xargs -J % echo $PROMPTDIA % | llm -s -m4 -o temperature 0.2> $TMPDIR/graph.dot

# Convert the DOT file to a PNG of the map
echo "Drawing diagram"
dot $TMPDIR/graph.dot -Tpng > $TMPDIR/graph.png

# Get original image width
width=$(magick identify -format "%w" $TMPDIR/graph.png)

# Append caption
magick $TMPDIR/graph.png -size ${width}x -background white -fill white -bordercolor white -border 0x40 $TMPDIR/graph.png
magick $TMPDIR/graph.png -size ${width}x -gravity center -pointsize 14 caption:"$CAPTION" -gravity south -append $TMPDIR/output.png

# Add border
magick $TMPDIR/output.png -bordercolor white -border 20x20 $MAPDIR/output.png

# Open the newly drawn map
open $MAPDIR/output.png
