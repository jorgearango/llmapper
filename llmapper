#!/bin/bash

# Draw a concept map from a Wikipedia page

# Directory for temporary files; this lets you monitor prompt output
TMPDIR="./tmp"

# Directory to save generated maps. By default, the file will be named
# output.png. Change that each time so you don't overwrite your maps.
MAPDIR="./maps"

# Get the title of the page to be mapped; eliminate the "- Wikipedia" string.
TITLE=$(curl -s $1 | grep -i '<title>' | sed -e 's/<[^>]*>//g' | sed -e 's/ - Wikipedia//g' | awk '{$1=$1;print}')

# Give user feedback - it's working.
echo "Drawing a map for \"$TITLE\"..."

# Caption to be appended to the bottom of the map.
CAPTION="\"$TITLE\" by LLMapper â€¢ This is an AI-generated concept map. It likely has errors and is published solely for educational purposes."

# Set variable for prompt that summarizes article
PROMPTSUM=$(<./prompt-summarize.md)

# Prompt that turns summary into a set of subject-predicate-object sentences.
# read -r -d '' PROMPTSTR << EOM
PROMPTSTR=$(<./prompt-rdf.md)

# Prompt that turns subject-predicate-object sentences into DOT language.
# read -r -d '' PROMPTDIA << EOM
PROMPTDIA=$(<./prompt-dot.md)

# Fetch content from URL, focus on one particular region, truncate to 8,000 tokens, pass to LLM for summarization
echo "Parsing URL"
curl -s $1 | strip-tags .mw-content-ltr | ttok -t 8000 | llm -s "$PROMPTSUM" > $TMPDIR/summary-out.md

# Pass summarized text to prompt that generates RDF of the summary
echo "Writing RDF code"
cat $TMPDIR/summary-out.md | sed -e "s/'/\\\\'/g" -e 's/"/\\\\"/g' | xargs -J % echo $PROMPTSTR % | llm -s -m4 > $TMPDIR/rdf-out.md

# Pass subject-object-predicate sentences to prompt that generate DOT code
echo "Writing DOT code"
# cat $TMPDIR/prompt-1-out.md | sed -e "s/'/\\\\'/g" -e 's/"/\\\\"/g' | xargs -J % echo $PROMPTDIA % | llm -s -m4 | sed '/```.*/d' > $TMPDIR/graph.dot
cat $TMPDIR/rdf-out.md | sed -e "s/'/\\\\'/g" -e 's/"/\\\\"/g' | xargs -J % echo $PROMPTDIA % | llm -s -m4 > $TMPDIR/graph.dot

# Convert the DOT file to a PNG of the map
echo "Drawing diagram"
dot $TMPDIR/graph.dot -Tpng > $TMPDIR/graph.png

# Wait for a bit
# sleep 10

# Remove 1 pixel from right and bottom of image
convert $TMPDIR/graph.png -crop -1-1 $TMPDIR/graph.png

# Get original image width
width=$(magick identify -format "%w" $TMPDIR/graph.png)

# Append caption
convert $TMPDIR/graph.png \
  \( -size ${width}x -background 'white' -fill 'darkgray' -border 0x40 -bordercolor 'white' -gravity center -pointsize 14 caption:"$CAPTION" \) \
  -gravity south -append $MAPDIR/output.png

# Add border
convert $MAPDIR/output.png -bordercolor white -border 20x20 -crop 100%x100%+0-30 $MAPDIR/output.png

# Open the newly drawn map
open $MAPDIR/output.png
